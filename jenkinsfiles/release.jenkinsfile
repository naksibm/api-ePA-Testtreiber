@Library('gematik-jenkins-shared-library') _

def CREDENTIAL_ID_GEMATIK_GIT = 'svc_gitlab_prod_credentials'
def REPO_URL = createGitUrl('git/Testtools/ePA/epa-fdv-testdriver-api')
def BRANCH = (target == 'epa3.0') ? 'main' : target
def JIRA_PROJECT_ID = 'EPT'
def TEAMS_URL = 'https://gematikde.webhook.office.com/webhookb2/01cda61b-5c5e-4000-ad6a-7b087feaf0e8@30092c62-4dbf-43bf-a33f-10d21b5b660a/IncomingWebhook/8cbb77af22234c81bbecb8822d3b25fb/a8e7e03f-9a7f-4dce-ba23-6f130fa63ee4'

String JIRA_PROJECT_PREFIX = 'fdv-api'
int JIRA_VERSION_DASH_POSITION = 2 // the Position of the dash symbol ("-") in JIRA string
// To be filled dynamically with the Pipeline execution
String TAGNAME = ''
String VERSION = ''
String NEXT_VERSION = ''


pipeline {

    options {
        disableConcurrentBuilds()
	    skipDefaultCheckout()
        buildDiscarder logRotator(artifactNumToKeepStr: '5', numToKeepStr: '5')
    }

    agent { label 'k8-backend-small' }

        parameters {
            choice(name: 'target', choices: ['epa3.0', 'epa3.1'], description: 'Select the branch (head) on which the tag is to be created')
            choice(name: 'GITHUB', choices: ['YES', 'NO'], description: 'GitHub-Release wird ausgef√ºhrt.')
        }

    environment {
        TAGNAME = "${RELEASE_VERSION}"
    }

    stages {
        stage('Initialise') {
            steps {
                setProperties([notifyTeams(TEAMS_URL)])
                useJdk("OPENJDK21")
                gitSetIdentity()
            }
        }

        stage('Configure Versions') {
            steps {
                script {
                    // JIRA_RELEASE_VERSION comes from Jenkins Manual Trigger (format: JIRA_PROJECT_PREFIX-X.Y.Z)
                    VERSION = "${JIRA_RELEASE_VERSION}".split('-')[JIRA_VERSION_DASH_POSITION]

                    if (VERSION == "3.1.0") {
                        // ----------------- currently we release only candidates -----------------
                        def splitted = JIRA_RELEASE_VERSION.split("rc")
                        NEXT_VERSION = splitted[0] + 'rc' + ((splitted[1] as int) + 1)
                        VERSION = VERSION + '-rc' + splitted[1]
                        // ------------------------------------------------------------------------
                    } else {
                        NEXT_VERSION = getNextVersion(VERSION, 'patch')
                    }

                    if ("${NEXT_VERSION}" == "${VERSION}") {
                        currentBuild.result = 'ABORTED'
                        error('NEXT_VERSION must be different than VERSION')
                    }

                    TAGNAME = "${JIRA_RELEASE_VERSION}"

                    echo 'Summary of Versions:'
                    echo "Release Branch: ${BRANCH}"
                    echo "JIRA Release Version: ${JIRA_RELEASE_VERSION}"
                    echo "Git Release Tag: ${TAGNAME}"
                    echo "Release Version: ${VERSION}"
                    echo "Next Version for the Project: ${NEXT_VERSION}"
                }
            }
        }

        stage('Checkout') {
            steps {
                git branch: BRANCH,
                    credentialsId: CREDENTIAL_ID_GEMATIK_GIT,
                    url: REPO_URL
            }
        }

        stage('Create Release-Tag') {
            steps {
                gitCreateAndPushTag(JIRA_PROJECT_ID, TAGNAME, BRANCH)
            }
        }

        stage('Release Jira-Version') {
            steps {
                jiraReleaseVersion(JIRA_PROJECT_ID, JIRA_RELEASE_VERSION)
            }
        }

        stage('Create New Jira-Version') {
            steps {
                script {
                    try {
                        String jiraNewVersion = "${JIRA_PROJECT_PREFIX}-${NEXT_VERSION}"
                        jiraCreateNewVersion(JIRA_PROJECT_ID, jiraNewVersion)
                    } catch (jiraException) {
                        echo 'version already exists in Jira, no new version created!'
                    }
                }
            }
        }

        stage('GitHub-Release') {
            when {
                expression { params.GITHUB == 'YES' }
            }
            steps {
               build job: 'ePA-fdv_testdriver-github-release',
               parameters: [
                    string(name: 'GITLAB_TAG', value: String.valueOf("${JIRA_RELEASE_VERSION}")),
                    text(name: 'COMMIT_MESSAGE', value: String.valueOf("${JIRA_RELEASE_VERSION}")),
                    string(name: 'BRANCH', value: String.valueOf(BRANCH)),
                    string(name: 'AUTOMATIC_MERGE', value: String.valueOf('YES')),
                    string(name: 'GITHUB_TAG', value: String.valueOf("${VERSION}")),
                    string(name: 'REMOTE_BRANCH', value: String.valueOf(BRANCH)),
               ]
            }
        }
    }
    post {
        always {
            sendEMailNotification(getPatientEMailList())
        }
    }
}
